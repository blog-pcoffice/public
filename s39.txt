cat << 'EOF_' | tee /root/i_set_network.bash || $Error :
#!/bin/bash

SCRIPT_VER="1.0.0"
SCRIPT_PATH=/root
MAINTENANCE_FILE=ignore_MAINTENANCE_FILE
. $SCRIPT_PATH/i_common.include
if [ $# -ge 1 ]; then
  echo "Arg: $@ ($#) / too many." | $ECHODEV
  exit 1
fi

cat << 'EOF' | tee /etc/modprobe.d/bonding.conf || $Error :
alias bond0 bonding
alias bond1 bonding
EOF

BOND0_BONDING_OPTS="resend_igmp=1 updelay=0 use_carrier=1 miimon=100 downdelay=0 primary_reselect=2 fail_over_mac=0 mode=active-backup primary=eth0 arp_validate=0 arp_interval=0"
BOND1_BONDING_OPTS="resend_igmp=1 updelay=0 use_carrier=1 miimon=100 downdelay=0 primary_reselect=2 fail_over_mac=0 mode=active-backup primary=eth1 arp_validate=0 arp_interval=0"
[ "$i_DGW_DEV" = "bond1" ] || BOND1_BONDING_OPTS="resend_igmp=1 updelay=0 use_carrier=1 miimon=100 downdelay=0 mode=balance-rr arp_validate=0 arp_interval=0"

shred -uvz  /etc/sysconfig/network-scripts/ifcfg-bond0
cat << EOF | tee /etc/sysconfig/network-scripts/ifcfg-bond0
DEVICE=bond0
NAME=bond0
TYPE=Bond
PROXY_METHOD=none
BROWSER_ONLY=no
UUID=$(uuidgen)
BONDING_OPTS="$BOND0_BONDING_OPTS"
BONDING_MASTER=yes
ONBOOT=yes
BOOTPROTO=none
DEFROUTE=yes
PEERDNS=no
PEERROUTES=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
IPV6_AUTOCONF=no
IPV6_DEFROUTE=no
IPV6_PEERDNS=no
IPV6_PEERROUTES=no
IPV6_FAILURE_FATAL=no
MULTI_CONNECT=1
DEVTIMEOUT=60
NM_CONTROLLED=no
IPADDR=$i_BOND0_IP
PREFIX=$i_BOND0_PREFIX
DNS1=$i_DNS1
DNS2=$i_DNS2
DOMAIN=
MTU=$i_BOND0_MTU
EOF

shred -uvz  /etc/sysconfig/network-scripts/ifcfg-bond1
cat << EOF | tee /etc/sysconfig/network-scripts/ifcfg-bond1
DEVICE=bond1
NAME=bond1
TYPE=Bond
PROXY_METHOD=none
BROWSER_ONLY=no
UUID=$(uuidgen)
BONDING_OPTS="$BOND1_BONDING_OPTS"
BONDING_MASTER=yes
ONBOOT=yes
BOOTPROTO=none
DEFROUTE=yes
PEERDNS=no
PEERROUTES=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
IPV6_AUTOCONF=no
IPV6_DEFROUTE=no
IPV6_PEERDNS=no
IPV6_PEERROUTES=no
IPV6_FAILURE_FATAL=no
MULTI_CONNECT=1
DEVTIMEOUT=60
NM_CONTROLLED=no
IPADDR=$i_BOND1_IP
PREFIX=$i_BOND1_PREFIX
MTU=$i_BOND1_MTU
EOF

shred -uvz  /etc/sysconfig/network-scripts/ifcfg-eth0
cat << EOF | tee /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
NAME=eth0
TYPE=Ethernet
UUID=$(uuidgen)
MASTER=bond0
SLAVE=yes
ONBOOT=yes
NM_CONTROLLED=no
MTU=$i_BOND0_MTU
EOF

shred -uvz  /etc/sysconfig/network-scripts/ifcfg-eth3
cat << EOF | tee /etc/sysconfig/network-scripts/ifcfg-eth3
DEVICE=eth3
NAME=eth3
TYPE=Ethernet
UUID=$(uuidgen)
MASTER=bond0
SLAVE=yes
ONBOOT=yes
NM_CONTROLLED=no
MTU=$i_BOND0_MTU
EOF
if [ "$i_NUMBER_OF_BOND0_SLAVES" = "1" ]; then
  sed -i -e '/^MASTER=/d' /etc/sysconfig/network-scripts/ifcfg-eth3
  sed -i -e '/^SLAVE=/d' /etc/sysconfig/network-scripts/ifcfg-eth3
fi

shred -uvz  /etc/sysconfig/network-scripts/ifcfg-eth1
cat << EOF | tee /etc/sysconfig/network-scripts/ifcfg-eth1
DEVICE=eth1
NAME=eth1
TYPE=Ethernet
UUID=$(uuidgen)
MASTER=bond1
SLAVE=yes
ONBOOT=yes
NM_CONTROLLED=no
MTU=$i_BOND1_MTU
EOF

shred -uvz  /etc/sysconfig/network-scripts/ifcfg-eth2
cat << EOF | tee /etc/sysconfig/network-scripts/ifcfg-eth2
DEVICE=eth2
NAME=eth2
TYPE=Ethernet
UUID=$(uuidgen)
MASTER=bond1
SLAVE=yes
ONBOOT=yes
NM_CONTROLLED=no
MTU=$i_BOND1_MTU
EOF
if [ "$i_NUMBER_OF_BOND1_SLAVES" = "1" ]; then
  sed -i -e '/^MASTER=/d' /etc/sysconfig/network-scripts/ifcfg-eth2
  sed -i -e '/^SLAVE=/d' /etc/sysconfig/network-scripts/ifcfg-eth2
fi

shred -uvz  /etc/sysconfig/network
cat << EOF | tee /etc/sysconfig/network
NETWORKING=Yes
GATEWAY=$i_DGW
NOZEROCONF=yes
EOF

shred -uvz  /etc/sysconfig/network-scripts/route-bond0
shred -uvz  /etc/sysconfig/network-scripts/route-bond1
[ "$i_BOND0_STATIC_ROUTE0" ] && echo "$i_BOND0_STATIC_ROUTE0" | tee -a /etc/sysconfig/network-scripts/route-bond0
[ "$i_BOND0_STATIC_ROUTE1" ] && echo "$i_BOND0_STATIC_ROUTE1" | tee -a /etc/sysconfig/network-scripts/route-bond0
[ "$i_BOND0_STATIC_ROUTE2" ] && echo "$i_BOND0_STATIC_ROUTE2" | tee -a /etc/sysconfig/network-scripts/route-bond0
[ "$i_BOND1_STATIC_ROUTE0" ] && echo "$i_BOND1_STATIC_ROUTE0" | tee -a /etc/sysconfig/network-scripts/route-bond1
[ "$i_BOND1_STATIC_ROUTE1" ] && echo "$i_BOND1_STATIC_ROUTE1" | tee -a /etc/sysconfig/network-scripts/route-bond1
[ "$i_BOND1_STATIC_ROUTE2" ] && echo "$i_BOND1_STATIC_ROUTE2" | tee -a /etc/sysconfig/network-scripts/route-bond1

shred -uvz  /etc/hosts
cat << EOF | tee /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
$i_NODE1_BOND0_IP $i_NODE1_NAME iden1-mn$(if [ "$i_DGW_DEV" = "bond0" ]; then echo " iden1-sv"; fi)
$i_NODE1_BOND1_IP $i_NODE1_NAME-bond1 $(if [ "$i_DGW_DEV" = "bond1" ]; then echo iden1-sv; else echo iden1-hb; fi)
$i_NODE1_BMC_IP $i_NODE1_NAME-bmc
$i_NODE2_BOND0_IP $i_NODE2_NAME iden2-mn$(if [ "$i_DGW_DEV" = "bond0" ]; then echo " iden2-sv"; fi)
$i_NODE2_BOND1_IP $i_NODE2_NAME-bond1 $(if [ "$i_DGW_DEV" = "bond1" ]; then echo iden2-sv; else echo iden2-hb; fi)
$i_NODE2_BMC_IP $i_NODE2_NAME-bmc
$i_DB i-db
$i_SV $i_CLUSTER_FQDN
$i_COOPERATIVE1 $i_COOPERATIVE_NAME1 emr
$([ "$i_COOPERATIVE_NAME2" ] && echo $i_COOPERATIVE2 $i_COOPERATIVE_NAME2)
$([ "$i_COOPERATIVE_NAME3" ] && echo $i_COOPERATIVE3 $i_COOPERATIVE_NAME3)
EOF

cat << EOF | tee /etc/netconfig
udp        tpi_clts      v     inet     udp     -       -
tcp        tpi_cots_ord  v     inet     tcp     -       -
#udp6       tpi_clts      v     inet6    udp     -       -
#tcp6       tpi_cots_ord  v     inet6    tcp     -       -
rawip      tpi_raw       -     inet      -      -       -
local      tpi_cots_ord  -     loopback  -      -       -
unix       tpi_cots_ord  -     loopback  -      -       -
EOF

cat << EOF | tee /etc/nsswitch.conf
passwd:     files systemd
shadow:     files
group:      files systemd
hosts:      files dns
services:   files
automount:  files
aliases:    files
ethers:     files
gshadow:    files
networks:   files dns
protocols:  files
publickey:  files
rpc:        files
EOF

shred -uvz  /etc/resolv.conf
if [ "$i_DNS1" ]; then
  cat << EOF | tee /etc/resolv.conf
nameserver $i_DNS1
$([ "$i_DNS2" ] && echo nameserver $i_DNS2)
EOF
else
  echo "" | tee /etc/resolv.conf
fi

shred -uvz  /etc/hostname
echo $i_NODENAME | tee /etc/hostname
hostnamectl set-hostname $i_NODENAME
hostnamectl

sed -i -e '/<Syslog name="syslog" format="RFC5424" host=".*" port="514" protocol="UDP" facility="LOCAL3" appName="tomcat"/ s/ host="[^"]*" / host="'127.0.0.1'" /' /apl/tomcat/log4j/conf/log4j2.xml
#sed -i -e '/<Syslog name="syslog" format="RFC5424" host=".*" port="514" protocol="UDP" facility="LOCAL3" appName="tomcat"/ s/ host="[^"]*" / host="'$i_NODENAME'" /' /apl/tomcat/log4j/conf/log4j2.xml

if dmidecode -s system-product-name | egrep -q 'Virtual|KVM|Xen'; then
  rm -f /etc/modprobe.d/hyperv.conf
else
  cat << 'EOF' | tee /etc/modprobe.d/hyperv.conf
blacklist hid_hyperv
blacklist hv_balloon
blacklist hv_netvsc
blacklist hv_storvsc
blacklist hv_utils
blacklist hv_vmbus
blacklist hyperv_fb
blacklist hyperv_keyboard
EOF
fi

cat << 'EOF' | tee /etc/rsyslog.conf
#### MODULES ####

module(load="imuxsock" SysSock.Use="off")
module(load="imjournal" StateFile="imjournal.state")
#module(load="imklog") # reads kernel messages (the same are read from journald)
#module(load="immark") # provides --MARK-- message capability
module(load="omprog")

# Provides UDP syslog reception
module(load="imudp") # needs to be done just once
input(type="imudp" port="514")

# Provides TCP syslog reception
#module(load="imtcp") # needs to be done just once
#input(type="imtcp" port="514")

#### GLOBAL DIRECTIVES ####

global(workDirectory="/var/lib/rsyslog")
module(load="builtin:omfile" Template="RSYSLOG_TraditionalFileFormat")

template (name="Template1" type="string" string="/backup/self/syslog/%HOSTNAME%/%timereported:::date-year%/%timereported:::date-month%/%timereported:::date-day%/%programname%.log")
template (name="Template2" type="string" string="%timegenerated:::date-year%/%timegenerated:::date-month%/%timegenerated:::date-day% %timegenerated:::date-hour%:%timegenerated:::date-minute%:%timegenerated:::date-second%:%timegenerated:::date-subseconds% %hostname% %syslogtag% %syslogfacility-text%.%syslogseverity-text%:%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")
template (name="Template3" type="string" string="%hostname% %syslogtag% %syslogfacility-text%.%syslogseverity-text%:%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")

$MaxOpenFiles 65535
$MaxMessageSize 8k
$RepeatedMsgReduction off

$umask 0000
$FileCreateMode 0600
$DirCreateMode 0700
$FileOwner root
$FileGroup root
$DirOwner root
$DirGroup root

include(file="/etc/rsyslog.d/*.conf" mode="optional")

#### RULES ####

#kern.*                                                 /dev/console;Template2

#*.info;mail.none;authpriv.none;cron.none;local7.none;local6.none;local5.none;local4.none;local3.none;local2.none;local1.none;local0.none /var/log/messages;Template2
*.warn;mail.none;authpriv.none;cron.none /var/log/messages;Template2

authpriv.*                                              /var/log/secure;Template2

mail.*                                                  -/var/log/maillog;Template2

cron.*                                                  /var/log/cron;Template2

*.emerg                                                 :omusrmsg:*

uucp,news.crit                                          /var/log/spooler;Template2

local7.*                                                /var/log/boot.log;Template2
local6.*                                                /var/log/infrascripts.log;Template2
local5.*                                                /var/log/httpd/error_log;Template2
local4.*                                                /var/log/httpd/access_log;Template2
local3.*                                                /var/log/tomcat/catalina.log;Template2
local2.*                                                /var/log/postgresql.log;Template2
local1.*                                                /var/log/pacemaker.log;Template2
local0.*                                                /var/log/apl.log;Template2
EOF

[ "$i_RSYSLOG_JA" = "on" ] || sed -i -e 's/;Template2//' /etc/rsyslog.conf

shred -uvz  /etc/rsyslog.d/logserver.conf
cat << EOF | tee /etc/rsyslog.d/logserver.conf
if \$fromhost-ip == ['$i_NODE1_BMC_IP' , '$i_NODE2_BMC_IP'] then {
  action(type="omprog"
         binary="/usr/local/bin/i_bmc_syslog.bash"
         template="Template3")
  stop
}
if \$fromhost-ip != '127.0.0.1' then {
  ?Template1;Template2
  stop
}
*.*                                                     ?Template1;Template2
*.*                                                     @$i_peer
EOF
[ "$i_LOG1" ] && echo "*.$i_LOG_PRIORITY @$i_LOG1" | tee -a /etc/rsyslog.d/logserver.conf
[ "$i_LOG2" ] && echo "*.$i_LOG_PRIORITY @$i_LOG2" | tee -a /etc/rsyslog.d/logserver.conf

cat << 'EOF' | tee /etc/sysconfig/chronyd
OPTIONS="-4"
EOF

shred -uvz  /etc/chrony.conf
cat << EOF | tee /etc/chrony.conf
$([ "$i_NTP1" ] && echo server $i_NTP1 iburst)
$([ "$i_NTP2" ] && echo server $i_NTP2 iburst)
$([ "$i_NTP3" ] && echo server $i_NTP3 iburst)
$([ "$i_CLUSTER_INDEX" = "2" ] && echo server $i_peer iburst)
stratumweight 0
driftfile /var/lib/chrony/drift
makestep 1.0 3
#leapsecmode slew
rtcsync
allow $i_peer/32
allow $i_NODE1_BMC_IP/32
allow $i_NODE2_BMC_IP/32
bindcmdaddress 127.0.0.1
local stratum $((i_CLUSTER_INDEX*2+10))
keyfile /etc/chrony.keys
leapsectz right/UTC
logchange 0.5
noclientlog
logdir /var/log/chrony
log measurements statistics tracking
EOF

sed -i -e 's/^ServerName .*$/ServerName '"$i_CLUSTER_FQDN"':443/' /etc/httpd/conf.d/ssl.conf

cat << 'EOF' | tee /etc/dnsmasq.d/domain.conf
domain-needed
EOF
if [ "$i_DNSMASQ" = "on" ]; then
  systemctl enable dnsmasq.service
else
  systemctl disable dnsmasq.service
fi

shred -uvz  /etc/firewalld/zones/public.xml
shred -uvz  /etc/firewalld/zones/public.xml.old
cat << 'EOF' | tee /etc/firewalld/zones/public.xml
<?xml version="1.0" encoding="utf-8"?>
<zone>
  <short>Public</short>
  <description>For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.</description>
  <service name="ssh"/>
  <service name="high-availability"/>
  <service name="https"/>
  <service name="postgresql"/>
  <service name="dns"/>
  <service name="syslog"/>
  <service name="ntp"/>
</zone>
EOF
cp -a /etc/firewalld/zones/public.xml{,.old}

if [ "$i_FIREWALL" = "on" ]; then
  systemctl enable firewalld.service
  systemctl stop firewalld.service
  systemctl start firewalld.service
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=127.0.0.0/8 accept"
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_NODE1_BOND0_IP accept"
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_NODE1_BOND1_IP accept"
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_NODE1_BMC_IP accept"
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_NODE2_BOND0_IP accept"
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_NODE2_BOND1_IP accept"
  firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_NODE2_BMC_IP accept"
  [ "$i_TRUSTED_IP_ADDR1" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR1 accept"
  [ "$i_TRUSTED_IP_ADDR2" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR2 accept"
  [ "$i_TRUSTED_IP_ADDR3" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR3 accept"
  [ "$i_TRUSTED_IP_ADDR4" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR4 accept"
  [ "$i_TRUSTED_IP_ADDR5" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR5 accept"
  [ "$i_TRUSTED_IP_ADDR6" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR6 accept"
  [ "$i_TRUSTED_IP_ADDR7" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR7 accept"
  [ "$i_TRUSTED_IP_ADDR8" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR8 accept"
  [ "$i_TRUSTED_IP_ADDR9" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR9 accept"
  [ "$i_TRUSTED_IP_ADDR10" ] && firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 source address=$i_TRUSTED_IP_ADDR10 accept"
else
  systemctl disable firewalld.service
fi

if [ "$i_CONSOLE_MFA" = "on" ]; then
  ln -sf login_ga_on /etc/pam.d/login
else
  ln -sf login_ga_off /etc/pam.d/login
fi

if [ "$i_USER_MFA" = "on" ]; then
  ln -sf password-auth_ga_on /etc/pam.d/password-auth
  ln -sf sshd_config_ga_on /etc/ssh/sshd_config
else
  ln -sf password-auth_ga_off /etc/pam.d/password-auth
  ln -sf sshd_config_ga_off /etc/ssh/sshd_config
fi

shred -uvz  /etc/pg-rex_tools.conf
cat << EOF | tee /etc/pg-rex_tools.conf
D_LAN_IPAddress = $i_NODE1_BOND0_IP, $i_NODE2_BOND0_IP
IC_LAN_IPAddress = ($i_NODE1_BOND0_IP, $i_NODE2_BOND0_IP) , ($i_NODE1_BOND1_IP, $i_NODE2_BOND1_IP)
Archive_dir = /var/lib/pgsql/pgarch
STONITH = enable
IPADDR_STANDBY = disable
PGPATH = /usr/pgsql-12/bin
PEER_NODE_SSH_PASS_MODE = nopass
PEER_NODE_SSH_PASS_FILE =
BACKUP_NODE_SSH_PASS_MODE = nopass
BACKUP_NODE_SSH_PASS_FILE =
PG_REX_Primary_ResourceID = pgsql-clone
PG_REX_Primitive_ResourceID = pgsql
IPADDR_PRIMARY_ResourceID = ipaddr-primary
IPADDR_REPLICATION_ResourceID = ipaddr-replication
#IPADDR_STANDBY_ResourceID = ipaddr-standby
PING_ResourceID = ping-clone
STONITH_ResourceID = fence1 , fence2
HACLUSTER_NAME = $i_CLUSTERNAME
EOF
[ "$i_DGW_DEV" = "bond0" ] && sed -i -e "s/^D_LAN_IPAddress = .*$/D_LAN_IPAddress = $i_NODE1_BOND1_IP, $i_NODE2_BOND1_IP/" /etc/pg-rex_tools.conf

if [ -r /var/lib/pgsql/.pgpass -a -r /root/.ssh/postgres.pw ]; then
cat << EOF | tee /var/lib/pgsql/.pgpass
localhost:5432:*:postgres:$(cat /root/.ssh/postgres.pw)
$i_NODE1_BOND0_IP:5432:replication:repuser:$(cat /root/.ssh/postgres.pw)
$i_NODE1_BOND1_IP:5432:replication:repuser:$(cat /root/.ssh/postgres.pw)
$i_NODE2_BOND0_IP:5432:replication:repuser:$(cat /root/.ssh/postgres.pw)
$i_NODE2_BOND1_IP:5432:replication:repuser:$(cat /root/.ssh/postgres.pw)
$i_BOND0_VIP:5432:replication:repuser:$(cat /root/.ssh/postgres.pw)
$i_BOND1_VIP:5432:replication:repuser:$(cat /root/.ssh/postgres.pw)
EOF
chmod 600 /var/lib/pgsql/.pgpass
fi

if [ -r /var/lib/pgsql/data/pg_hba.conf ]; then
[ -r /var/lib/pgsql/data/pg_hba.conf~ ] || cp -a /var/lib/pgsql/data/pg_hba.conf{,~}
sed -i -e '/repuser/d' /var/lib/pgsql/data/pg_hba.conf
cat << EOF | tee -a /var/lib/pgsql/data/pg_hba.conf || $Error :
host    replication     repuser         $i_NODE1_BOND0_IP/32        scram-sha-256
host    replication     repuser         $i_NODE1_BOND1_IP/32        scram-sha-256
host    replication     repuser         $i_NODE2_BOND0_IP/32        scram-sha-256
host    replication     repuser         $i_NODE2_BOND1_IP/32        scram-sha-256
EOF
fi

if [ -r /etc/corosync/corosync.conf ]; then
cat << EOF | tee /etc/corosync/corosync.conf
totem {
    version: 2
    cluster_name: pgrex_cluster
    transport: knet
    crypto_cipher: aes256
    crypto_hash: sha256
}

nodelist {
    node {
        ring0_addr: $i_NODE1_BOND0_IP
        ring1_addr: $i_NODE1_BOND1_IP
        name: $i_NODE1_NAME
        nodeid: 1
    }

    node {
        ring0_addr: $i_NODE2_BOND0_IP
        ring1_addr: $i_NODE2_BOND1_IP
        name: $i_NODE2_NAME
        nodeid: 2
    }
}

quorum {
    provider: corosync_votequorum
    two_node: 1
}

logging {
    to_logfile: yes
    logfile: /var/log/cluster/corosync.log
    to_syslog: yes
    timestamp: on
}
EOF
fi

if [ -r /var/lib/pcsd/known-hosts ]; then
cat << EOF | tee /var/lib/pcsd/known-hosts
{
  "format_version": 1,
  "data_version": 4,
  "known_hosts": {
    "$i_NODE1_NAME": {
      "dest_list": [
        {
          "addr": "$i_NODE1_BOND0_IP",
          "port": 2224
        }
      ],
      "token": "79c16e7c-b16d-438e-adcf-ab0ce5f1372d"
    },
    "$i_NODE2_NAME": {
      "dest_list": [
        {
          "addr": "$i_NODE2_BOND0_IP",
          "port": 2224
        }
      ],
      "token": "3ed5d0b1-a3e9-486b-a4cf-e1f73ad94148"
    }
  }
}
EOF
fi

shred -uvz  /root/dbcluster.xml
cat << EOF | tee /root/dbcluster.xml
<cib crm_feature_set="3.4.1" validate-with="pacemaker-3.4" epoch="17" num_updates="0" admin_epoch="0">
  <configuration>
    <crm_config>
      <cluster_property_set id="cib-bootstrap-options">
        <nvpair id="cib-bootstrap-options-pe-input-series-max" name="pe-input-series-max" value="0"/>
        <nvpair id="cib-bootstrap-options-pe-warn-series-max" name="pe-warn-series-max" value="0"/>
        <nvpair id="cib-bootstrap-options-pe-error-series-max" name="pe-error-series-max" value="0"/>
        <nvpair id="cib-bootstrap-options-stonith-max-attempts" name="stonith-max-attempts" value="15"/>
      </cluster_property_set>
    </crm_config>
    <nodes/>
    <resources>
      <group id="primary-group">
        <primitive class="ocf" id="ipaddr-primary" provider="heartbeat" type="IPaddr2">
          <instance_attributes id="ipaddr-primary-instance_attributes">
            <nvpair id="ipaddr-primary-instance_attributes-cidr_netmask" name="cidr_netmask" value="$([ "$i_DGW_DEV" = "bond0" ] && echo $i_BOND0_PREFIX || echo $i_BOND1_PREFIX)"/>
            <nvpair id="ipaddr-primary-instance_attributes-ip" name="ip" value="$i_SV"/>
            <nvpair id="ipaddr-primary-instance_attributes-nic" name="nic" value="$i_DGW_DEV"/>
          </instance_attributes>
          <operations>
            <op id="ipaddr-primary-monitor-interval-10s" interval="10s" name="monitor" on-fail="restart" timeout="60s"/>
            <op id="ipaddr-primary-start-interval-0s" interval="0s" name="start" on-fail="restart" timeout="60s"/>
            <op id="ipaddr-primary-stop-interval-0s" interval="0s" name="stop" on-fail="fence" timeout="60s"/>
          </operations>
        </primitive>
        <primitive class="ocf" id="ipaddr-replication" provider="heartbeat" type="IPaddr2">
          <instance_attributes id="ipaddr-replication-instance_attributes">
            <nvpair id="ipaddr-replication-instance_attributes-cidr_netmask" name="cidr_netmask" value="$([ "$i_DGW_DEV" = "bond0" ] && echo $i_BOND1_PREFIX || echo $i_BOND0_PREFIX)"/>
            <nvpair id="ipaddr-replication-instance_attributes-ip" name="ip" value="$i_DB"/>
            <nvpair id="ipaddr-replication-instance_attributes-nic" name="nic" value="$([ "$i_DGW_DEV" = "bond0" ] && echo bond1 || echo bond0)"/>
          </instance_attributes>
          <operations>
            <op id="ipaddr-replication-monitor-interval-10s" interval="10s" name="monitor" on-fail="restart" timeout="60s"/>
            <op id="ipaddr-replication-start-interval-0s" interval="0s" name="start" on-fail="restart" timeout="60s"/>
            <op id="ipaddr-replication-stop-interval-0s" interval="0s" name="stop" on-fail="fence" timeout="60s"/>
          </operations>
        </primitive>
      </group>
      <clone id="pgsql-clone">
        <primitive class="ocf" id="pgsql" provider="linuxhajp" type="pgsql">
          <instance_attributes id="pgsql-instance_attributes">
            <nvpair id="pgsql-instance_attributes-master_ip" name="master_ip" value="$i_DB"/>
            <nvpair id="pgsql-instance_attributes-node_list" name="node_list" value="$i_NODE1_NAME $i_NODE2_NAME"/>
            <nvpair id="pgsql-instance_attributes-pgctl" name="pgctl" value="/usr/pgsql-12/bin/pg_ctl"/>
            <nvpair id="pgsql-instance_attributes-pgdata" name="pgdata" value="/var/lib/pgsql/data"/>
            <nvpair id="pgsql-instance_attributes-pgdb" name="pgdb" value="template1"/>
            <nvpair id="pgsql-instance_attributes-pgdba" name="pgdba" value="postgres"/>
            <nvpair id="pgsql-instance_attributes-pgport" name="pgport" value="5432"/>
            <nvpair id="pgsql-instance_attributes-primary_conninfo_opt" name="primary_conninfo_opt" value="keepalives_idle=60 keepalives_interval=5 keepalives_count=5"/>
            <nvpair id="pgsql-instance_attributes-psql" name="psql" value="/usr/pgsql-12/bin/psql"/>
            <nvpair id="pgsql-instance_attributes-rep_mode" name="rep_mode" value="sync"/>
            <nvpair id="pgsql-instance_attributes-repuser" name="repuser" value="repuser"/>
            <nvpair id="pgsql-instance_attributes-restore_command" name="restore_command" value="/bin/cp /var/lib/pgsql/pgarch/%f %p"/>
            <nvpair id="pgsql-instance_attributes-stop_escalate" name="stop_escalate" value="0"/>
            <nvpair id="pgsql-instance_attributes-xlog_check_count" name="xlog_check_count" value="0"/>
          </instance_attributes>
          <operations>
            <op id="pgsql-demote-interval-0s" interval="0s" name="demote" on-fail="fence" timeout="300s"/>
            <op id="pgsql-methods-interval-0s" interval="0s" name="methods" timeout="5s"/>
            <op id="pgsql-monitor-interval-10s" interval="10s" name="monitor" on-fail="restart" timeout="60s"/>
            <op id="pgsql-monitor-interval-9s" interval="9s" name="monitor" on-fail="restart" role="Master" timeout="60s"/>
            <op id="pgsql-notify-interval-0s" interval="0s" name="notify" timeout="60s"/>
            <op id="pgsql-promote-interval-0s" interval="0s" name="promote" on-fail="restart" timeout="300s"/>
            <op id="pgsql-start-interval-0s" interval="0s" name="start" on-fail="restart" timeout="300s"/>
            <op id="pgsql-stop-interval-0s" interval="0s" name="stop" on-fail="fence" timeout="300s"/>
          </operations>
        </primitive>
        <meta_attributes id="pgsql-clone-meta_attributes">
          <nvpair id="pgsql-clone-meta_attributes-promotable" name="promotable" value="true"/>
          <nvpair id="pgsql-clone-meta_attributes-promoted-max" name="promoted-max" value="1"/>
          <nvpair id="pgsql-clone-meta_attributes-promoted-node-max" name="promoted-node-max" value="1"/>
          <nvpair id="pgsql-clone-meta_attributes-clone-max" name="clone-max" value="2"/>
          <nvpair id="pgsql-clone-meta_attributes-clone-node-max" name="clone-node-max" value="1"/>
          <nvpair id="pgsql-clone-meta_attributes-notify" name="notify" value="true"/>
        </meta_attributes>
      </clone>
      <clone id="ping-clone">
        <primitive class="ocf" id="ping" provider="pacemaker" type="ping">
          <instance_attributes id="ping-instance_attributes">
            <nvpair id="ping-instance_attributes-attempts" name="attempts" value="2"/>
            <nvpair id="ping-instance_attributes-debug" name="debug" value="true"/>
            <nvpair id="ping-instance_attributes-host_list" name="host_list" value="$i_PING_TARGET"/>
            <nvpair id="ping-instance_attributes-name" name="name" value="ping-status"/>
            <nvpair id="ping-instance_attributes-timeout" name="timeout" value="2"/>
          </instance_attributes>
          <operations>
            <op id="ping-monitor-interval-10s" interval="10s" name="monitor" on-fail="restart" timeout="60s"/>
            <op id="ping-start-interval-0s" interval="0s" name="start" on-fail="restart" timeout="60s"/>
            <op id="ping-stop-interval-0s" interval="0s" name="stop" on-fail="fence" timeout="60s"/>
          </operations>
        </primitive>
      </clone>
      <primitive class="stonith" id="fence1" type="fence_ipmilan">
        <instance_attributes id="fence1-instance_attributes">
          <nvpair id="fence1-instance_attributes-password" name="password" value="$(cat /root/.ssh/stonith.pw)"/>
          <nvpair id="fence1-instance_attributes-ip" name="ip" value="$i_NODE1_BMC_IP"/>
          <nvpair id="fence1-instance_attributes-pcmk_host_list" name="pcmk_host_list" value="$i_NODE1_NAME"/>
          <nvpair id="fence1-instance_attributes-privlvl" name="privlvl" value="operator"/>
          <nvpair id="fence1-instance_attributes-username" name="username" value="stonith"/>
          <nvpair id="fence1-instance_attributes-lanplus" name="lanplus" value="1"/>
        </instance_attributes>
        <operations>
          <op id="fence1-monitor-interval-3600s" interval="3600s" name="monitor" on-fail="restart" timeout="60s"/>
          <op id="fence1-start-interval-0s" interval="0s" name="start" on-fail="restart" timeout="60s"/>
          <op id="fence1-stop-interval-0s" interval="0s" name="stop" on-fail="ignore" timeout="60s"/>
        </operations>
      </primitive>
      <primitive class="stonith" id="fence2" type="fence_ipmilan">
        <instance_attributes id="fence2-instance_attributes">
          <nvpair id="fence2-instance_attributes-password" name="password" value="$(cat /root/.ssh/stonith.pw)"/>
          <nvpair id="fence2-instance_attributes-ip" name="ip" value="$i_NODE2_BMC_IP"/>
          <nvpair id="fence2-instance_attributes-pcmk_host_list" name="pcmk_host_list" value="$i_NODE2_NAME"/>
          <nvpair id="fence2-instance_attributes-privlvl" name="privlvl" value="operator"/>
          <nvpair id="fence2-instance_attributes-username" name="username" value="stonith"/>
          <nvpair id="fence2-instance_attributes-lanplus" name="lanplus" value="1"/>
        </instance_attributes>
        <operations>
          <op id="fence2-monitor-interval-3600s" interval="3600s" name="monitor" on-fail="restart" timeout="60s"/>
          <op id="fence2-start-interval-0s" interval="0s" name="start" on-fail="restart" timeout="60s"/>
          <op id="fence2-stop-interval-0s" interval="0s" name="stop" on-fail="ignore" timeout="60s"/>
        </operations>
      </primitive>
    </resources>
    <constraints>
      <rsc_location id="location-fence1-$i_NODE1_NAME--INFINITY" node="$i_NODE1_NAME" rsc="fence1" score="-INFINITY"/>
      <rsc_location id="location-fence2-$i_NODE2_NAME--INFINITY" node="$i_NODE2_NAME" rsc="fence2" score="-INFINITY"/>
      <rsc_location id="location-pgsql-clone" rsc="pgsql-clone">
        <rule boolean-op="or" id="location-pgsql-clone-rule" score="-INFINITY">
          <expression attribute="ping-status" id="location-pgsql-clone-rule-expr" operation="not_defined"/>
          <expression attribute="ping-status" id="location-pgsql-clone-rule-expr-1" operation="lt" value="1"/>
        </rule>
      </rsc_location>
      <rsc_colocation id="colocation-pgsql-clone-ping-clone-INFINITY" rsc="pgsql-clone" score="INFINITY" with-rsc="ping-clone"/>
      <rsc_colocation id="colocation-primary-group-pgsql-clone-INFINITY" rsc="primary-group" rsc-role="Started" score="INFINITY" with-rsc="pgsql-clone" with-rsc-role="Master"/>
      <rsc_order first="ping-clone" first-action="start" id="order-ping-clone-pgsql-clone-mandatory" symmetrical="false" then="pgsql-clone" then-action="start"/>
      <rsc_order first="pgsql-clone" first-action="promote" id="order-pgsql-clone-primary-group-mandatory" symmetrical="false" then="primary-group" then-action="start"/>
      <rsc_order first="pgsql-clone" first-action="demote" id="order-pgsql-clone-primary-group-Optional" kind="Optional" symmetrical="false" then="primary-group" then-action="stop"/>
    </constraints>
    <rsc_defaults>
      <meta_attributes id="rsc_defaults-meta_attributes">
        <nvpair id="rsc_defaults-meta_attributes-resource-stickiness" name="resource-stickiness" value="200"/>
        <nvpair id="rsc_defaults-meta_attributes-migration-threshold" name="migration-threshold" value="1"/>
      </meta_attributes>
    </rsc_defaults>
  </configuration>
  <status/>
</cib>
EOF

shred -uvz  /etc/crontab
cat << 'EOF' | tee /etc/crontab | $ECHODEV
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root

# For details see man 4 crontabs

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name  command to be executed

0 0 * * * root /bin/bash /etc/cron.daily/logrotate
0 0 * * * root /usr/local/bin/i_audit_log_rotate.bash -f > /dev/null 2>&1 || :
* * * * * root /usr/local/bin/i_aide_check.bash -f -a > /dev/null 2>&1 || :
* * * * * root /usr/local/bin/i_copy_auth_info_to_peer.bash > /dev/null 2>&1 || :
* * * * * root /usr/local/bin/i_copy_cron_settings_for_apl.bash > /dev/null 2>&1 || :
* * * * * root /usr/local/bin/i_send_luks_pp.bash -f > /dev/null 2>&1 || :
* * * * * root /usr/local/bin/i_monitoring_cluster.bash > /dev/null 2>&1 || :
EOF
[ "$i_CRON1" ] && echo "$i_CRON1" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON2" ] && echo "$i_CRON2" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON3" ] && echo "$i_CRON3" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON4" ] && echo "$i_CRON4" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON5" ] && echo "$i_CRON5" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON6" ] && echo "$i_CRON6" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON7" ] && echo "$i_CRON7" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON8" ] && echo "$i_CRON8" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON9" ] && echo "$i_CRON9" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON10" ] && echo "$i_CRON10" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON11" ] && echo "$i_CRON11" | tee -a /etc/crontab | $ECHODEV
[ "$i_CRON12" ] && echo "$i_CRON12" | tee -a /etc/crontab | $ECHODEV

#[ "$i_NUMBER_OF_BOND0_SLAVES" = "2" ] && sed -i -e 's/bond=bond0:eth0:/bond=bond0:eth0,eth3:/' /etc/default/grub
#[ "$i_NUMBER_OF_BOND0_SLAVES" = "1" ] &&sed -i -e 's/bond=bond0:eth0,eth3:/bond=bond0:eth0:/' /etc/default/grub
sed -i -e 's/ ip=[^ ]*"$/ ip='$i_BOND0_IP::$i_DGW_FOR_DRACUT:$i_BOND0_PREFIX:$i_NODENAME:eth0:none:$i_BOND0_MTU'"/' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
:
EOF_
chmod 755 /root/i_set_network.bash || $Error :
